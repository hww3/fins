Version 0.1

- Added template type StringSimple and Application->get_string_view()
- Added describe_object and action_link macros
- Added Application->get_controller_for_path()
- Added magic field "_id" in model objects for getting the primary key value.
- Applications are created with default logging configurations for each
    tier, with a debug and access log.
- Added Tools.String.named_sprintf().
- added DataObject->default_sort_fields which configures the order in 
    which multiple objects of a given type are sorted.
- automatically set alternate key during model configuration for data sources 
    that provide unique constraint information (mysql in pike 7.7). 
- added get_session_by_id() to Fins.Request.
- added "sessionid" macro
- pike -x fins start now uses -c|--config= configname, instead of the 
    config being specified using the last command line argument
- added pike -x fins model add tablename... to create model stub classes
- added DataObject, DataObjectInstance->set_operator() to set the operator
    used during find operations on multiple fields.
- Added Fins.Model.InCriteria()
- added FinsController->action_url() to generate urls dynamically with 
  support for an application's context root (mount point)
- added FinsView->flush_templates() to flush all cached templates.
- Response->redirect() is now split into redirect() and redirect_temp().
- added Stomp and JMS messaging support
- added controller_name, controller_path and event_name to request
- added support for layouts in simple templating
- error messages are themeable: templates/error/[404|500|template].phtml
- added beginning of scaffolding: crud for basic types, no joins yet.
- added validation callbacks for data model sets
- added validation override flags to skip validation
- added special Fins.Errors.Validation error type.
- added Fins.Errors for holding special exception types.
- added more friendly error messages
- added default event (index) to FinsController.
- added "internal" templates for things like the default
    event view (see previous entry).
- added pike -x fins toolset
- added pike -x fins create [appname]
- added pike -x fins start [appname]
- added automatic registration of datatypes
- added automatic selection of references from database schema
- added automatic definition of data types from database schema
- added plural -> singular noun inflection
- added singular -> plural noun inflection
- added macros library: boolean, sizeof, capitalize
- added javascript macros: remote_form, javascript_includes
- add_ref() is called more consistently when creating new 
  data object instances.
- added support for cache headers for /static/ requests.
- added Response()->not_modified()
- added Response()->get_lang() for localization
- added Response()->fins_app
- added Configuration()->app_name
- Template.Simple macro functionality is slightly optimized
- added command line options for fin_serve, including a daemon mode
- added FastCGI and SCGI runners in fcgi/
- added -p portnum option to (f|s)cgi/runners
- reorganized FinsBase, got rid of methods for app, model, view; added cache
- moved macros to FinsView
- moved Fins.Template functionality to FinsView
- added XMLRPCController, a FinsController variant which allows methods in 
  a controller to be called via an XMLRPC call to the controller "mount" 
  point. All public functions will be made available via XMLRPC, and each 
  receives the Request object as the first argument.
- created Fins.Template.View as a wrapper around a Template and TemplateData
- added FinsView->get_view("templatename"), all template getting methods will 
  automatically add the apropriate template extension, so don't provide the 
  .phtml or .xml extensions.
- added Response->set_view(Template.View);
- added Request()->not_args, the part of the request path that triggered 
  the event being called.
- added DocController, a FinsController variant which will pass a 
  preselected template to the event function, based on the event's 
  location within the request tree.
- added config option view/reload that can be used to reload page 
  templates when they are changed. useful for development purposes.
- added Model.BinaryStringField, and support for encoding and decoding
  binary strings.
- added Model.CompoundCriteria and Model.LimitCriteria
- added macro: format_time
- added JSONController
- added before_filter() and after_filter() to controller
- added Helpers.Filters.Compress for server->client compression of data.
- added sliding expiration to cache, moved cache to Fins.Cache.Cache; 
  leaving a placeholder behind.
- added "bt" and "backtrace" commands to the breakpoint hilfe.
- added load_controller(controllername) to FinsController. You must use this
  method to load controllers now.
- controllers and view can be set to auto-reload for speedier development
- added DataObject->add_default_data_object() to allow specification of
  default objects on new object attributes.

